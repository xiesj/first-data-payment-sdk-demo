var crypto = require('crypto');
var dateFormat = require('dateformat');

module.exports = function(options) {
    this.title = typeof options.title !== 'undefined' ? options.title : 'Payment preparing';
    this.message = typeof options.message !== 'undefined' ? options.message : 'Payment preparing...';
    this.body = typeof options.body !== 'undefined' ? options.body : '        <center>' + this.message + '.</center>';

    this.type = typeof options.type !== 'undefined' ? options.type : 'sale';
    this.mode = typeof options.mode !== 'undefined' ? options.mode : 'payonly';
    this.currency = typeof options.currency !== 'undefined' ? options.currency + '' : '702';
    this.sharedSecret = typeof options.sharedSecret !== 'undefined' ? options.sharedSecret : '';
    this.storeId = typeof options.storeId !== 'undefined' ? options.storeId : '';
    this.successURL = typeof options.successURL !== 'undefined' ? options.successURL : '';
    this.failURL = typeof options.failURL !== 'undefined' ? options.failURL : '';

    if (typeof options.action !== 'undefined') {
        this.action = options.action
    } else if (typeof options.test !== 'undefined' && options.test === true) {
        this.action = 'https://test.ipg-online.com/connect/gateway/processing';
    } else {
        this.action = 'https://www4.ipg-online.com/connect/gateway/processing';
    }

    this.timezone = 'GMT';

    this.pay = function (payOptions) {
        var chargetotal = Number(payOptions.chargetotal).toFixed(2)
        var oid = payOptions.oid

        var extOptionsHtml = ''
        if (oid) {
            extOptionsHtml += '            <input type="hidden" name="oid" value="' + oid + '">';
        }

        this.datetime = dateFormat(new Date(), "GMT:yyyy:mm:dd-HH:MM:ss");

        var string = '' + this.storeId + this.datetime + chargetotal + currency + this.sharedSecret
        this.hash = this.stringToHash(string)

        var html = '<!DOCTYPE html>' +
            '<html>' +
            '    <head><title>' + this.title + '</title></head>' +
            '    <body onload="paymentForm.submit()">' +
            this.body +
            '        <form name="paymentForm" method="post" action="' + this.action + '">' +
            extOptionsHtml +
            '            <input type="hidden" name="txntype" value="' + this.type + '">' +
            '            <input type="hidden" name="timezone" value="' + this.timezone + '"/>' +
            '            <input type="hidden" name="txndatetime" value="' + this.datetime + '"/>' +
            '            <input type="hidden" name="hash_algorithm" value="SHA256"/>' +
            '            <input type="hidden" name="hash" value="' + this.hash + '"/>' +
            '            <input type="hidden" name="storename" value="' + this.storeId + '"/>' +
            '            <input type="hidden" name="mode" value="' + this.mode + '"/>' +
            '            <input type="hidden" name="chargetotal" value="' + chargetotal + '"/>' +
            '            <input type="hidden" name="currency" value="' + this.currency + '"/>' +
            '            <input type="hidden" name="responseSuccessURL" value="' + this.successURL + '"/>' +
            '            <input type="hidden" name="responseFailURL" value="' + this.failURL + '"/>' +
            '        </form>' +
            '    </body>' +
            '</html>'
        return html
    }

    this.stringToHash = function (string) {
        var buf = Buffer.from(string, 'ascii').toString('hex');
        return crypto.createHash('sha256').update(buf).digest('hex');
    }

    this.verifyRequest = function (body) {
        var string = this.sharedSecret + body.approval_code  + body.chargetotal + body.currency + body.txndatetime + this.storeId
        var hash = this.stringToHash(string)
        return hash == body.response_hash
    }

    return this;
}
